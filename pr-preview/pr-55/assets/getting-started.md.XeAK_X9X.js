import{_ as m,c as u,a3 as d,b as r,w as o,a4 as s,j as t,a as i,B as p,o as a,G as l}from"./chunks/framework.CF3HqmxZ.js";const B=JSON.parse('{"title":"Getting Started with ImmyBot","description":"","frontmatter":{},"headers":[],"relativePath":"getting-started.md","filePath":"getting-started.md"}'),h={name:"getting-started.md"};function c(g,e,f,y,b,k){const n=p("Mermaid");return a(),u("div",null,[e[4]||(e[4]=d('<h1 id="getting-started-with-immybot" tabindex="-1">Getting Started with ImmyBot <a class="header-anchor" href="#getting-started-with-immybot" aria-label="Permalink to &quot;Getting Started with ImmyBot&quot;">​</a></h1><p>This guide will help you understand the core concepts of ImmyBot and get started with automating your IT management tasks.</p><h2 id="introduction-to-immybot" tabindex="-1">Introduction to ImmyBot <a class="header-anchor" href="#introduction-to-immybot" aria-label="Permalink to &quot;Introduction to ImmyBot&quot;">​</a></h2><p><strong>The goal of ImmyBot is to setup a computer knowing only the customer and the end user.</strong></p><p>ImmyBot is a powerful automation platform designed to simplify IT management by automating software deployment, configuration, and maintenance across your entire fleet of devices. Unlike traditional RMM tools, ImmyBot uses a declarative approach focused on desired state configuration.</p><h2 id="thinking-with-immy" tabindex="-1">Thinking with Immy <a class="header-anchor" href="#thinking-with-immy" aria-label="Permalink to &quot;Thinking with Immy&quot;">​</a></h2><p>Thinking with Immy means thinking in terms of how things &quot;should be&quot; rather than the steps to make them that way. This paradigm shift allows you to focus on the end result rather than the process.</p><p>You teach ImmyBot how things &quot;should be&quot; by creating Deployments that define the desired state for your managed devices.</p><h2 id="understanding-deployments" tabindex="-1">Understanding Deployments <a class="header-anchor" href="#understanding-deployments" aria-label="Permalink to &quot;Understanding Deployments&quot;">​</a></h2><p>Deployments are the core building blocks of ImmyBot. They define what should be installed or configured on which computers.</p>',10)),(a(),r(s,null,{default:o(()=>[l(n,{id:"mermaid-30",class:"mermaid",graph:"graph%20LR%0Asubgraph%20%22Deployment%22%0A%20%20%20%20Input%5B%22Software%20or%20Task%22%5D%20--%3E%7C%22Should%20Be%22%7C%20DesiredState%5B%22Desired%20State%22%5D%20--%3E%7Con%7C%20Group%5B%22One%20or%20More%20Computers%22%5D%0Aend%0A"})]),fallback:o(()=>e[0]||(e[0]=[i(" Loading... ")])),_:1})),e[5]||(e[5]=t("p",null,"For example, a basic deployment might specify that Adobe Reader should be installed on all workstations:",-1)),(a(),r(s,null,{default:o(()=>[l(n,{id:"mermaid-34",class:"mermaid",graph:"graph%20LR%0Asubgraph%20%22Adobe%20Reader%22%0A%20%20%20%20Input1%5B%22Adobe%20Reader%22%5D%20--%3E%7C%22Should%20Be%22%7C%20DesiredState1%5B%22Installed%22%5D%20--%3E%7Con%7C%20Group1%5B%22All%20Workstations%20and%20Portable%20Devices%22%5D%0Aend%0A"})]),fallback:o(()=>e[1]||(e[1]=[i(" Loading... ")])),_:1})),e[6]||(e[6]=t("h3",{id:"conditional-deployments",tabindex:"-1"},[i("Conditional Deployments "),t("a",{class:"header-anchor",href:"#conditional-deployments","aria-label":'Permalink to "Conditional Deployments"'},"​")],-1)),e[7]||(e[7]=t("p",null,'How things "should be" is often dependent on external factors. For example:',-1)),e[8]||(e[8]=t("ul",null,[t("li",null,"Customer A should have SentinelOne because they pay for it"),t("li",null,"Person A should have Visio 365 because they have a license for it")],-1)),e[9]||(e[9]=t("p",null,"ImmyBot allows deployments to be conditionally applied based on the result of scripts that can check external systems or conditions:",-1)),(a(),r(s,null,{default:o(()=>[l(n,{id:"mermaid-56",class:"mermaid",graph:"graph%20LR%0Asubgraph%20%22Should%20Deployment%20Apply%3F%22%0A%20%20%20%20Input%20--%3E%20Metascript%5B%22Script%20checks%20condition%22%5D%0A%20%20%20%20Metascript%20--%3E%20True%5B%22Apply%20deployment%22%5D%0A%20%20%20%20Metascript%20--%3E%20False%5B%22Skip%20deployment%22%5D%0Aend%0A"})]),fallback:o(()=>e[2]||(e[2]=[i(" Loading... ")])),_:1})),e[10]||(e[10]=t("p",null,"For example, you can create a deployment that installs Visio only for users who have a license:",-1)),(a(),r(s,null,{default:o(()=>[l(n,{id:"mermaid-60",class:"mermaid",graph:"graph%20LR%0Asubgraph%20%22Should%20Visio%20Install%3F%22%0A%20%20%20%20EndUser%5B%22Input%3A%20End%20User%22%5D%20--%3E%20Script%5B%22Graph%20API%20Script%3A%20Does%20End%20User%20have%20Visio%20License%3F%22%5D%0A%20%20%20%20Script%20--%3E%20True1%5B%22Yes%3A%20Install%20Visio%22%5D%0A%20%20%20%20Script%20--%3E%20False1%5B%22No%3A%20Skip%20installation%22%5D%0Aend%0A"})]),fallback:o(()=>e[3]||(e[3]=[i(" Loading... ")])),_:1})),e[11]||(e[11]=d('<p>This powerful conditional logic is built into ImmyBot, allowing you to create sophisticated, dynamic deployment rules that adapt to your environment.</p><h2 id="core-components-of-immybot" tabindex="-1">Core Components of ImmyBot <a class="header-anchor" href="#core-components-of-immybot" aria-label="Permalink to &quot;Core Components of ImmyBot&quot;">​</a></h2><p>ImmyBot deploys and manages two primary types of items:</p><ol><li><strong>Software</strong> - Applications and utilities installed on computers</li><li><strong>Tasks</strong> - Configuration settings, policies, and other non-software items</li></ol><h3 id="understanding-tasks" tabindex="-1">Understanding Tasks <a class="header-anchor" href="#understanding-tasks" aria-label="Permalink to &quot;Understanding Tasks&quot;">​</a></h3><p>Tasks are used for anything that isn&#39;t software installation, such as:</p><ul><li>Configuring Bitlocker encryption</li><li>Setting power options</li><li>Configuring Windows settings</li><li>Managing registry entries</li><li>Setting up user profiles</li></ul><p><strong>Key Task Features:</strong></p><ul><li>You can use Tasks to configure software by selecting a &quot;Configuration Task&quot; for the software</li><li>Configuration Tasks are useful for configuring applications (even if they weren&#39;t installed by ImmyBot)</li><li>Configuration Tasks run after ImmyBot determines the software is installed</li><li>Configuration Task parameters are available in all scripts related to the software</li></ul><h2 id="verification-and-testing" tabindex="-1">Verification and Testing <a class="header-anchor" href="#verification-and-testing" aria-label="Permalink to &quot;Verification and Testing&quot;">​</a></h2><p>ImmyBot tests everything it does before and after it does it, ensuring that changes are applied correctly and consistently.</p><h3 id="software-verification" tabindex="-1">Software Verification <a class="header-anchor" href="#software-verification" aria-label="Permalink to &quot;Software Verification&quot;">​</a></h3><p><strong>Version Detection</strong> - Runs before installation to determine if installation is necessary, and after to verify the desired version is installed:</p><ul><li><strong>DisplayName</strong> detection methods: <ul><li>Contains - Checks if the display name contains a specific string</li><li>Regex - Uses regular expressions for more complex matching</li><li>Traditional (Wildcard *) - Uses wildcard patterns for matching</li></ul></li><li><strong>UpgradeCode</strong> - For MSI-based installations</li><li><strong>Script</strong> - Custom detection scripts that must return a version or null</li></ul><p><strong>Test Script</strong> - If software is installed, the failure of this test (the test script returning <code>$false</code>) will trigger a &quot;Repair&quot; action (default Uninstall/Install) of the application:</p><ul><li>Example: Check to verify Foxit PDF Editor&#39;s preview handler extension is working in Windows Explorer; reinstalling the PDF Editor usually corrects this scenario</li></ul><h3 id="task-verification" tabindex="-1">Task Verification <a class="header-anchor" href="#task-verification" aria-label="Permalink to &quot;Task Verification&quot;">​</a></h3><ul><li><strong>Test script</strong> - When using separate scripts to verify configuration</li><li><strong>Combined script</strong> - Returns <code>$false</code> when <code>$method</code> is &#39;test&#39; if the configuration is not correct</li></ul><h2 id="real-world-example-adobe-reader-deployment" tabindex="-1">Real-World Example: Adobe Reader Deployment <a class="header-anchor" href="#real-world-example-adobe-reader-deployment" aria-label="Permalink to &quot;Real-World Example: Adobe Reader Deployment&quot;">​</a></h2><p>We find that most MSPs install Adobe Reader by default, so ImmyBot includes a Recommended Deployment that states:</p><ul><li>&quot;The latest version of Adobe Reader should be installed for all Workstations and Portable Devices&quot;</li></ul><p>When this rule applies (i.e., it isn&#39;t disabled or overridden by a more specific rule), ImmyBot will do the following:</p><ol><li><strong>Find the latest version</strong> - Run the Adobe Reader &quot;dynamic version&quot; script that uses a public API to return the latest full version number and download URL</li><li><strong>Check current installation</strong> - Determine the installed version (if any) by looking for Adobe Reader in Add/Remove Programs</li><li><strong>Queue appropriate action</strong> - Schedule an Install or Upgrade task based on the current state</li><li><strong>Configure default settings</strong> - Set Adobe Reader to be the default PDF handler by running the &quot;configuration task&quot;</li></ol><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>Now that you understand the basics of ImmyBot, you might want to explore:</p><ul><li><a href="./core-concepts.html">Core Concepts</a> - Learn more about ImmyBot&#39;s architecture and principles</li><li><a href="./quick-start-guide.html">Quick Start Guide</a> - Get up and running quickly with ImmyBot</li><li><a href="./common-workflows.html">Common Workflows</a> - See how to accomplish common IT tasks with ImmyBot</li></ul>',26))])}const I=m(h,[["render",c]]);export{B as __pageData,I as default};
