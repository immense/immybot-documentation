import{_ as n,c as l,ah as s,b as r,w as a,ai as h,B as o,o as e,G as p,a as d}from"./chunks/framework.BWXOFiC5.js";const k="/assets/Invoke-ImmyCommand-Output.CjzQPhQy.png",f=JSON.parse('{"title":"Scripting Guide","description":"","frontmatter":{},"headers":[],"relativePath":"Documentation/AdvancedTopics/scripts.md","filePath":"Documentation/AdvancedTopics/scripts.md"}'),c={name:"Documentation/AdvancedTopics/scripts.md"};function u(g,i,y,E,m,F){const t=o("Mermaid");return e(),l("div",null,[i[1]||(i[1]=s('<h1 id="scripting-guide" tabindex="-1">Scripting Guide <a class="header-anchor" href="#scripting-guide" aria-label="Permalink to &quot;Scripting Guide&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">ImmyBot support will not assist with custom script writing</p><p>It is outside of the scope of support for ImmyBot to assist with custom scripting. You&#39;re more then welcome to send your questions to support, and we will answer as best as we can to guide you in the right direction.</p></div><p>This comprehensive guide explains how to create and manage scripts in ImmyBot, including best practices, script types, execution contexts, and helper functions.</p><h2 id="understanding-script-flow" tabindex="-1">Understanding Script Flow <a class="header-anchor" href="#understanding-script-flow" aria-label="Permalink to &quot;Understanding Script Flow&quot;">​</a></h2>',4)),(e(),r(h,null,{default:a(()=>[p(t,{id:"mermaid-14",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20A%5BDetection%20Script%5D%20--%3E%20%7C%22Test%20Script%20(Optional)%22%7C%20B(Dynamic%20Versions%20Script)%0A%20%20%20%20B%20--%3E%20C%7BDefault%20Download%20Script%7D%0A%20%20%20%20B%20--%3E%20D%7B%22Custom%20Download%20Script%20(Optional)%22%7D%0A%20%20%20%20C%20--%3E%20E(Install%20Script)%0A%20%20%20%20D%20--%3E%20E%0A%20%20%20%20E%20--%3E%20F(%22Post-Installation%20Script%20(Optional)%22)%0A"})]),fallback:a(()=>i[0]||(i[0]=[d(" Loading... ")])),_:1})),i[2]||(i[2]=s(`<h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><p>Follow these best practices to create effective, maintainable scripts in ImmyBot:</p><h3 id="code-organization-and-reuse" tabindex="-1">Code Organization and Reuse <a class="header-anchor" href="#code-organization-and-reuse" aria-label="Permalink to &quot;Code Organization and Reuse&quot;">​</a></h3><ul><li><strong>Search Existing Scripts</strong>: Use Ctrl+Shift+F or Ctrl+P in our script editor to find scripts that already do what you want. There&#39;s a lot of good logic in the built-in function scripts.</li><li><strong>Don&#39;t Repeat Yourself</strong>: Leverage function scripts to reuse code across multiple scripts.</li><li><strong>Modular Design</strong>: Break complex scripts into smaller, reusable functions.</li></ul><h3 id="testing-and-debugging" tabindex="-1">Testing and Debugging <a class="header-anchor" href="#testing-and-debugging" aria-label="Permalink to &quot;Testing and Debugging&quot;">​</a></h3><ul><li><strong>Test Environment</strong>: Have a dedicated machine you can test on.</li><li><strong>Backup Test Machine</strong>: Have a <em>separate</em> machine to test your sanity if you accidentally break your first test machine.</li><li><strong>Use the Debugger</strong>: Test by clicking Open Debugger in the logs: <ul><li>This gives you all available parameters on the left so you can test the script in its natural context</li><li>You can quickly revise the script here until it works as expected</li><li>Saving the script here saves it permanently</li></ul></li></ul><h3 id="security-and-best-practices" tabindex="-1">Security and Best Practices <a class="header-anchor" href="#security-and-best-practices" aria-label="Permalink to &quot;Security and Best Practices&quot;">​</a></h3><ul><li><strong>Avoid Hardcoding Paths</strong>: Don&#39;t hardcode paths to installer or license files; instead rely on <code>$InstallerFile</code> and <code>$LicenseFilePath</code>.</li><li><strong>Secure Sensitive Information</strong>: Don&#39;t hardcode license values or other sensitive information; instead utilize <code>$LicenseValue</code> or a custom parameter.</li><li><strong>Generic Installers</strong>: Avoid (where possible) installers that have client-specific licenses or customizations built in: <ul><li>If a generic installer isn&#39;t available (e.g., BitDefender), use Dynamic Versions (and potentially a URL parameter) to specify the download URL per customer or use an API to find the URL for the given customer.</li><li>If the URL requires authentication, use a custom Download script to perform the authenticated download (e.g., CrowdStrike/SentinelOne).</li></ul></li></ul><h3 id="verification-and-error-handling" tabindex="-1">Verification and Error Handling <a class="header-anchor" href="#verification-and-error-handling" aria-label="Permalink to &quot;Verification and Error Handling&quot;">​</a></h3><ul><li><strong>Verify Script Actions</strong>: Include code to verify that the script did what it intended to do: <ul><li>For Tasks, implement a &quot;test&quot; script</li><li>For Software, make sure your Detection method works, and optionally implement a Test script to verify things are in working order</li><li>When a software Test script returns <code>$false</code>, ImmyBot will re-install the software</li></ul></li><li><strong>Use Metascripts</strong>: Especially if your script needs to restart the machine or access APIs like IT Glue and therefore will contain sensitive data like API keys.</li><li><strong>Proper Error Handling</strong>: Use <code>throw &quot;The bad thing that happened, what user should do&quot;</code> to prevent cascading failure. That message will be shown to the user in a prominent location so they can take corrective action.</li><li><strong>Task Compliance</strong>: Tasks have a &quot;test&quot; mechanism that should return <code>$true</code> or <code>$false</code> to indicate compliance.</li></ul><blockquote><p><strong>Important</strong>: While it may be cumbersome to write additional logic to verify your work, the reward of knowing exactly how many machines are or are not compliant with your desired state is worth it. Without it, you are flying blind. With it, you know exactly how many machines require additional attention, giving you the opportunity to write better code that handles more edge cases. See the <a href="#configuration-task-helper-functions">Helper Function</a> section to see how we make your life easier.</p></blockquote><h2 id="script-types" tabindex="-1">Script Types <a class="header-anchor" href="#script-types" aria-label="Permalink to &quot;Script Types&quot;">​</a></h2><p>ImmyBot supports various script types, each serving a specific purpose in the automation workflow:</p><table tabindex="0"><thead><tr><th>Script Type</th><th>Description</th></tr></thead><tbody><tr><td>Software Detection</td><td>Determines if software is installed and its version</td></tr><tr><td>Software Action</td><td>Handles installation, uninstallation, and updates</td></tr><tr><td>Maintenance Task</td><td>Configures and tests system settings</td></tr><tr><td>Metascript (Deployment Target)</td><td>Runs on the server to determine deployment applicability</td></tr><tr><td>Filter Script (Deployment Target)</td><td>Returns specific computers for targeted deployments</td></tr><tr><td>Device Inventory</td><td>Collects information about managed devices</td></tr><tr><td>Function</td><td>Reusable code blocks for other scripts</td></tr><tr><td>Dynamic Version</td><td>Retrieves latest software version information</td></tr><tr><td>Download Installer</td><td>Custom logic for downloading software installers</td></tr><tr><td>Module</td><td>PowerShell modules for extended functionality</td></tr><tr><td>Preflight</td><td>Runs before maintenance to check prerequisites</td></tr><tr><td>Integration</td><td>Connects ImmyBot to external systems</td></tr></tbody></table><h3 id="software-detection" tabindex="-1">Software Detection <a class="header-anchor" href="#software-detection" aria-label="Permalink to &quot;Software Detection&quot;">​</a></h3><p>Software Detection scripts are used to determine whether an existing software is present and what version it may be.</p><p>Avoid custom detection scripts where possible. Software with a custom detection script can&#39;t be matched to pre-existing inventory data on the machine, making it difficult to report on how many machines have the software already. Further, the &quot;Assignable&quot; software tab won&#39;t work since that matches the detection method to existing inventory data. However if your software doesn&#39;t create an entry in Add/Remove Programs, you may have no choice but to use a custom detection script. It is important to note that a lot of software creates hidden entries under Add/Remove Programs, ImmyBot inventories these hidden entries, further reducing the need for custom detection scripts.</p><p>When you write your custom detection script, your best bet is to find a exe or dll file under Program Files&lt;software name&gt; or ProgramData&lt;softwarename&gt; that shows the version when you right click on it and go to Properties. To retrieve this version use a script similar to the following:</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Get-Command</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C:\\Program Files*\\&lt;softwarename&gt;\\mysoftware.exe&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ErrorAction SilentlyContinue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Version.ToString() }</span></span></code></pre></div><p>If there is no exe or dll file containing the version, perhaps there is a .ini, .config, .json or .xml file that contains the installed version.</p><p>If all else fails, you can simply return &quot;1.0&quot; if a file associated to the software exists.</p><p>These scripts <strong>must return a string that will cast to a valid <code>System.Version</code></strong>. Returning an actual <code>System.Version</code> will fail. (Although we may correct this in the future) For example</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$version = [String]&quot;1.2.3&quot;</span></span>
<span class="line"><span>return $version</span></span></code></pre></div><p>will work, but currently</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$version = [System.Version]&quot;1.2.3&quot;</span></span>
<span class="line"><span>return $version</span></span></code></pre></div><p>will fail.</p><h3 id="software-auto-update-deprecated-use-dynamic-versions-instead" tabindex="-1">Software Auto Update (Deprecated, use dynamic versions instead) <a class="header-anchor" href="#software-auto-update-deprecated-use-dynamic-versions-instead" aria-label="Permalink to &quot;Software Auto Update (Deprecated, use dynamic versions instead)&quot;">​</a></h3><p>These scripts are useful for automatically adding new versions for a software. Script should return a <code>$SoftwareVersion</code> object.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$SoftwareVersion = @{}</span></span>
<span class="line"><span>$SoftwareVersion.url = $LatestPackage.OriginFile.OriginUri</span></span>
<span class="line"><span>$SoftwareVersion.displayVersion = $VersionFromMsi</span></span>
<span class="line"><span>return $SoftwareVersion</span></span></code></pre></div><h3 id="software-version-action" tabindex="-1">Software Version Action <a class="header-anchor" href="#software-version-action" aria-label="Permalink to &quot;Software Version Action&quot;">​</a></h3><p>These scripts can be used on a software version for installation, post-installation, uninstallation, post-uninstallation, testing, and upgrade scripts.</p><h3 id="maintenance-task" tabindex="-1">Maintenance Task <a class="header-anchor" href="#maintenance-task" aria-label="Permalink to &quot;Maintenance Task&quot;">​</a></h3><p>These scripts are available only on maintenance tasks.</p><h3 id="metascript-deployment-target" tabindex="-1">Metascript Deployment Target <a class="header-anchor" href="#metascript-deployment-target" aria-label="Permalink to &quot;Metascript Deployment Target&quot;">​</a></h3><p>These scripts are used on deployments as a target.</p><p>They <strong>must return <code>$true</code> or <code>$false</code></strong>.</p><p>A value of <code>$true</code> indicates that the computer applies to this deployment. A value of <code>$false</code> indicates that the computer does not apply to this deployment.</p><h3 id="filter-script-deployment-target" tabindex="-1">Filter Script Deployment Target <a class="header-anchor" href="#filter-script-deployment-target" aria-label="Permalink to &quot;Filter Script Deployment Target&quot;">​</a></h3><p>These scripts are used on deployments as a target.</p><p>They <strong>must return a <code>Computer[]</code> array</strong>.</p><p>The deployment will only apply to computers specified in the returned array.</p><h2 id="script-execution-contexts" tabindex="-1">Script Execution Contexts <a class="header-anchor" href="#script-execution-contexts" aria-label="Permalink to &quot;Script Execution Contexts&quot;">​</a></h2><p>A script will have a specific execution context. This context determines how the script gets run.</p><h3 id="system" tabindex="-1">System <a class="header-anchor" href="#system" aria-label="Permalink to &quot;System&quot;">​</a></h3><p>The script runs on the computer under the system user.</p><h3 id="user" tabindex="-1">User <a class="header-anchor" href="#user" aria-label="Permalink to &quot;User&quot;">​</a></h3><p>The script runs on the computer under a specific user.</p><h3 id="metascript" tabindex="-1">Metascript <a class="header-anchor" href="#metascript" aria-label="Permalink to &quot;Metascript&quot;">​</a></h3><p>The script runs on the server in the context of a specific computer.</p><h3 id="cloudscript" tabindex="-1">Cloudscript <a class="header-anchor" href="#cloudscript" aria-label="Permalink to &quot;Cloudscript&quot;">​</a></h3><p>The script runs on the server in the context of a specific tenant.</p><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><p>Avoid setting these variables yourself or having variables with similar names.</p><h3 id="azuretenantid" tabindex="-1">$AzureTenantId <a class="header-anchor" href="#azuretenantid" aria-label="Permalink to &quot;$AzureTenantId&quot;">​</a></h3><p><code>[string]</code> The Azure Principal Id of the computer&#39;s tenant.</p><h4 id="accessible-in" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Detection</li><li>Software Auto Update</li><li>Software Version Action</li><li>Maintenance Task Setter</li><li>Metascript Deployment Target</li><li>Filterscript Deployment Target</li></ul><h3 id="computername" tabindex="-1">$ComputerName <a class="header-anchor" href="#computername" aria-label="Permalink to &quot;$ComputerName&quot;">​</a></h3><p><code>[string]</code> Name of the computer the session is running against</p><h4 id="accessible-in-1" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-1" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Detection</li><li>Software Auto Update</li><li>Software Version Action</li><li>Maintenance Task Setter</li><li>Metascript Deployment Target</li></ul><h3 id="detectionstring" tabindex="-1">$DetectionString <a class="header-anchor" href="#detectionstring" aria-label="Permalink to &quot;$DetectionString&quot;">​</a></h3><p><code>[string]</code> String used to find the software in the registry</p><h4 id="accessible-in-2" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-2" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Version Action</li></ul><h3 id="displayname" tabindex="-1">$DisplayName <a class="header-anchor" href="#displayname" aria-label="Permalink to &quot;$DisplayName&quot;">​</a></h3><p><code>[string]</code> Display Name of the Software Version</p><h4 id="accessible-in-3" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-3" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Version Action</li></ul><h3 id="displayversion" tabindex="-1">$DisplayVersion <a class="header-anchor" href="#displayversion" aria-label="Permalink to &quot;$DisplayVersion&quot;">​</a></h3><p><code>[System.Version]</code> version of the software being deployed <code>1.2.3.4</code></p><h4 id="accessible-in-4" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-4" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Version Action</li></ul><h3 id="installerfile" tabindex="-1">$InstallerFile <a class="header-anchor" href="#installerfile" aria-label="Permalink to &quot;$InstallerFile&quot;">​</a></h3><p><code>[string]</code> Full path to the installer file itself</p><h4 id="accessible-in-5" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-5" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Version Action</li></ul><h3 id="installerfolder" tabindex="-1">$InstallerFolder <a class="header-anchor" href="#installerfolder" aria-label="Permalink to &quot;$InstallerFolder&quot;">​</a></h3><p><code>[string]</code> Full path to the folder the installer file can be found in</p><h4 id="accessible-in-6" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-6" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Version Action</li></ul><h3 id="installerlogfile" tabindex="-1">$InstallerLogFile <a class="header-anchor" href="#installerlogfile" aria-label="Permalink to &quot;$InstallerLogFile&quot;">​</a></h3><p><code>[string]</code> Suggested full path for log file. When used Immy will get the content of this file for you and display it in our logs.</p><h4 id="accessible-in-7" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-7" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Version Action</li></ul><h3 id="isportable" tabindex="-1">$IsPortable <a class="header-anchor" href="#isportable" aria-label="Permalink to &quot;$IsPortable&quot;">​</a></h3><p><code>[boolean]</code> &#39;True&#39; or &#39;False&#39; indicating whether the current computer is a laptop/tablet</p><h4 id="accessible-in-8" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-8" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Detection</li><li>Software Auto Update</li><li>Software Version Action</li><li>Maintenance Task</li><li>Metascript Deployment Target</li></ul><h3 id="licensefilepath" tabindex="-1">$LicenseFilePath <a class="header-anchor" href="#licensefilepath" aria-label="Permalink to &quot;$LicenseFilePath&quot;">​</a></h3><p><code>[string]</code> Full path to the license file for the software (from the Deployment) Note: Software must be marked &#39;Licensed&#39; and Software Version must indicate that it requires a License File and an Deployment applicable to this user/computer must specify a license file.</p><h4 id="accessible-in-9" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-9" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Version Action</li></ul><h3 id="licensevalue" tabindex="-1">$LicenseValue <a class="header-anchor" href="#licensevalue" aria-label="Permalink to &quot;$LicenseValue&quot;">​</a></h3><p><code>[string]</code> From Deployment. Used for software that requires a key. Alternative usage could be to use this to hold additional command line parameters to customize installation for different computers. Software must be marked as Licensed for this variable to be replaced.</p><h4 id="accessible-in-10" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-10" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Version Action</li></ul><h3 id="method" tabindex="-1">$Method <a class="header-anchor" href="#method" aria-label="Permalink to &quot;$Method&quot;">​</a></h3><p><code>[string]</code> Will be a value consisting of <code>[ &quot;get&quot; | &quot;set&quot; | &quot;test&quot; ]</code> that can be used in Combined Task scripts.</p><h4 id="accessible-in-11" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-11" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Maintenance Task</li></ul><h3 id="primarypersonazureprincipalid" tabindex="-1">$PrimaryPersonAzurePrincipalId <a class="header-anchor" href="#primarypersonazureprincipalid" aria-label="Permalink to &quot;$PrimaryPersonAzurePrincipalId&quot;">​</a></h3><p><code>[Guid]</code> User&#39;s unique identifier in Azure</p><h4 id="accessible-in-12" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-12" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Detection</li><li>Software Auto Update</li><li>Software Version Action</li><li>Maintenance Task</li><li>Metascript Deployment Target</li></ul><h3 id="primarypersonemail" tabindex="-1">$PrimaryPersonEmail <a class="header-anchor" href="#primarypersonemail" aria-label="Permalink to &quot;$PrimaryPersonEmail&quot;">​</a></h3><p><code>[string]</code> Mail Address of the person that most frequently uses this computer</p><h4 id="accessible-in-13" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-13" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Detection</li><li>Software Auto Update</li><li>Software Version Action</li><li>Maintenance Task</li><li>Metascript Deployment Target</li></ul><h3 id="productcode" tabindex="-1">$ProductCode <a class="header-anchor" href="#productcode" aria-label="Permalink to &quot;$ProductCode&quot;">​</a></h3><p><code>[string]</code> Product code of the version being deployed</p><h4 id="accessible-in-14" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-14" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Version Action</li></ul><h3 id="software" tabindex="-1">$Software <a class="header-anchor" href="#software" aria-label="Permalink to &quot;$Software&quot;">​</a></h3><p><code>[Software]</code> The software that is running the auto update script.</p><h4 id="accessible-in-15" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-15" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Auto Update</li></ul><h3 id="softwarename" tabindex="-1">$SoftwareName <a class="header-anchor" href="#softwarename" aria-label="Permalink to &quot;$SoftwareName&quot;">​</a></h3><p><code>[string]</code> Name of the Software</p><h4 id="accessible-in-16" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-16" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Detection</li><li>Software Auto Update</li></ul><h3 id="softwareversions" tabindex="-1">$SoftwareVersions <a class="header-anchor" href="#softwareversions" aria-label="Permalink to &quot;$SoftwareVersions&quot;">​</a></h3><p><code>[ICollection&lt;SoftwareVersion&gt;]</code> The software versions of the software.</p><h4 id="accessible-in-17" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-17" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Auto Update</li></ul><h3 id="tenantname" tabindex="-1">$TenantName <a class="header-anchor" href="#tenantname" aria-label="Permalink to &quot;$TenantName&quot;">​</a></h3><p><code>[string]</code> Name of company the computer belongs to</p><h4 id="accessible-in-18" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-18" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Detection</li><li>Software Auto Update</li><li>Software Version Action</li><li>Maintenance Task</li><li>Metascript Deployment Target</li></ul><h3 id="upgradecode" tabindex="-1">$UpgradeCode <a class="header-anchor" href="#upgradecode" aria-label="Permalink to &quot;$UpgradeCode&quot;">​</a></h3><p><code>[string]</code> Upgrade code of the software</p><h4 id="accessible-in-19" tabindex="-1">Accessible in <a class="header-anchor" href="#accessible-in-19" aria-label="Permalink to &quot;Accessible in&quot;">​</a></h4><ul><li>Software Detection</li><li>Software Auto Update</li></ul><h2 id="configuration-task-helper-functions" tabindex="-1">Configuration Task Helper Functions <a class="header-anchor" href="#configuration-task-helper-functions" aria-label="Permalink to &quot;Configuration Task Helper Functions&quot;">​</a></h2><p>We provide helper functions for common tasks like Registry and configuration file manipulation</p><p>When used in the context of a Task, these functions honor the $method variable containing the mode the script should be run in (‘test’, ‘set’, or ‘get’)</p><p>**These must be run from the Metascript context</p><h3 id="get-windowsregistryvalue-registryshould-be" tabindex="-1">Get-WindowsRegistryValue | RegistryShould-Be <a class="header-anchor" href="#get-windowsregistryvalue-registryshould-be" aria-label="Permalink to &quot;Get-WindowsRegistryValue | RegistryShould-Be&quot;">​</a></h3><h4 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h4><p>Get-WindowsRegistryValue fetches the value of the specified Path and Name, and RegistryShould-Be tests and sets the value, creating missing keys/values if required</p><p>On average this saves 8-10 lines of PowerShell per registry value and makes your code significantly more readable</p><h4 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h4><ul><li>Microsoft Edge</li></ul><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><p>This assumes you have a parameter called ServerAddress</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Get-WindowsRegistryValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Path </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HKLM:\\Software\\MySoftware&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ServerAddress&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RegistryShould</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Be </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Value $ServerAddress</span></span></code></pre></div><h3 id="fileshould-be" tabindex="-1">FileShould-Be <a class="header-anchor" href="#fileshould-be" aria-label="Permalink to &quot;FileShould-Be&quot;">​</a></h3><h4 id="overview-1" tabindex="-1">Overview <a class="header-anchor" href="#overview-1" aria-label="Permalink to &quot;Overview&quot;">​</a></h4><p>This accepts the source file path as input and verifies the files exists in the destination path, overwriting if the hashes don&#39;t match</p><h4 id="example-1-config-file" tabindex="-1">Example 1 - Config File <a class="header-anchor" href="#example-1-config-file" aria-label="Permalink to &quot;Example 1 - Config File&quot;">​</a></h4><p>This assumes you have created a parameter called ConfigFile</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ConfigFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FileShould</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Be </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C:\\ProgramData\\MySoftware&quot;</span></span></code></pre></div><h4 id="example-2-zip-file" tabindex="-1">Example 2 - Zip File <a class="header-anchor" href="#example-2-zip-file" aria-label="Permalink to &quot;Example 2 - Zip File&quot;">​</a></h4><p>This assumes you have a parameter called ZippedConfig</p><p>The following script will iterate recursively over the extracted files and place them in the target directory. It will verify the hash matches when in test mode.</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ImmyBot will automatically extract the Zip file and put the path it extracted it to into a variable named $ZippedConfigFolder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ZippedConfigFolder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Invoke-ImmyCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Get-ChildItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:Folder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Recurse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">File }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ZippedConfigFolder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> select </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Expand FullName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ForEach-Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  $FilePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $_</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  $FilePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FileShould</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Be </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C:\\Program Files*\\MySoftware&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="xmlshould-be" tabindex="-1">XMLShould-Be <a class="header-anchor" href="#xmlshould-be" aria-label="Permalink to &quot;XMLShould-Be&quot;">​</a></h3><p>Let&#39;s say your software has an XML file you need to change settings in.</p><p>This assumes you have a parameter called ServerAddress</p><h4 id="usage-1" tabindex="-1">Usage <a class="header-anchor" href="#usage-1" aria-label="Permalink to &quot;Usage&quot;">​</a></h4><ul><li>OpenDental</li><li>SmartBoard</li></ul><h4 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h4><p>See the scripts for OpenDental and SmartBoard for usage of this</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ConfigFilePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C:\\ProgramData\\MySoftware\\configuration.xml&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$XML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Get-Content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ConfigFilePath</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$XML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $XML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XMLShould</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Be </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XPath </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/ServerAddress&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Value $ServerAddress</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$XML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Set-Content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ConfigFilePath</span></span></code></pre></div><h3 id="hkcushould-be" tabindex="-1">HKCUShould-Be <a class="header-anchor" href="#hkcushould-be" aria-label="Permalink to &quot;HKCUShould-Be&quot;">​</a></h3><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Get-WindowsRegistryValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Path </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HKCU:\\Software\\Policies\\OneDrive&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Name EnableADAL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HKCUShould</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Be </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><h3 id="shouldhave-one" tabindex="-1">ShouldHave-One <a class="header-anchor" href="#shouldhave-one" aria-label="Permalink to &quot;ShouldHave-One&quot;">​</a></h3><p>One of the aggravating things about PowerShell is ensuring there is exactly one item in a variable</p><p>Typically you would do something like this:</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$MatchingUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Get-ADUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Filter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.SAMAccountName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Admin*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$MatchingUserCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $MatchingUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> measure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> select </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Expand Count</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($MatchingUserCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  throw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;No matching users found&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($MatchingUserCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-gt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  throw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Multiple users found: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$MatchingUsers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Out-String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Is reduced to</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$MatchingUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Get-ADUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Filter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.SAMAccountName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Admin*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$MatchingUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ShouldHave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">One</span></span></code></pre></div><p>If you simply want to take the first element but warn if there are multiple, use the -TakeFirst switch</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$MatchingUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Get-ADUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Filter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.SAMAccountName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Admin*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$MatchingUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $MatchingUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ShouldHave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">One </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TakeFirst</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>Dynamic parameters allow you to define which parameters should be visible to the technician, while hiding others or setting their defaults.</p><h3 id="new-oauthconsentparameter" tabindex="-1">New-OAuthConsentParameter <a class="header-anchor" href="#new-oauthconsentparameter" aria-label="Permalink to &quot;New-OAuthConsentParameter&quot;">​</a></h3><p>The New-OAuthConsentParameter allows you to leverage OAuth2 to interact with third-party services/APIs.</p><p>Note: If you want to pass a client_secret you have to use the dynamic param block</p><h4 id="usage-2" tabindex="-1">Usage <a class="header-anchor" href="#usage-2" aria-label="Permalink to &quot;Usage&quot;">​</a></h4><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">New-OAuthConsentParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ResponseType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;string&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-Scope</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-AuthorizationEndpoint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;uri&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-TokenEndpoint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;uri&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-Resource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;string&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ClientId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;string&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ClientSecret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;string&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ExtraQueryParameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;hashtable&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-AllowNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-DefaultValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;Object&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-HelpMessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;string&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-Hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-Mandatory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-Position</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;type&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ValidatePattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;string&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ValidatePatternErrorMessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;string&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ValidValues</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ValueFromPipeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ValueFromPipelineByPropertyName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ValueFromRemainingArguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ValidateScript</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;scriptblock&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-ParameterSetName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;string&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;CommonParameters&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h4 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h4><h5 id="dynamic-param-block" tabindex="-1">Dynamic Param Block <a class="header-anchor" href="#dynamic-param-block" aria-label="Permalink to &quot;Dynamic Param Block&quot;">​</a></h5><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">dynamicparam</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        New-ParameterCollection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> @</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # The variable $RefreshToken now contains the OAuth response</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            New-OAuthConsentParameter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Name RefreshToken </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ResponseType code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AuthorizationEndpoint </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;AUTH_ENDPOINT&gt;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TokenEndpoint </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;TOKEN_ENDPOINT&gt;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ClientID </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;CLIENT_ID&gt;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ClientSecret </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;CLIENT_SECRET&gt;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Scope </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;SCOPE&gt;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Mandatory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h5 id="param-block" tabindex="-1">Param Block <a class="header-anchor" href="#param-block" aria-label="Permalink to &quot;Param Block&quot;">​</a></h5><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Mandatory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OAuthConsent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        authorizationEndpoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;AUTH_ENDPOINT&gt;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tokenEndpoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;TOKEN_ENDPOINT&gt;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        responseType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;RESPONCE_CODE&gt;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        resource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;RESOURCE&gt;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scope </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;SCOPE&gt;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ClientId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;CLIENT_ID&gt;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraQueryParameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    $OAuthInfo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="scripting-frequently-asked-questions" tabindex="-1">Scripting Frequently Asked Questions <a class="header-anchor" href="#scripting-frequently-asked-questions" aria-label="Permalink to &quot;Scripting Frequently Asked Questions&quot;">​</a></h2><h3 id="can-i-use-custom-parameters-in-my-scripts" tabindex="-1">Can I use custom parameters in my scripts? <a class="header-anchor" href="#can-i-use-custom-parameters-in-my-scripts" aria-label="Permalink to &quot;Can I use custom parameters in my scripts?&quot;">​</a></h3><p>Yes. Add parameters to the Task your script is associated to. If this is a software install script, associate the task to the software as a &quot;Configuration Task&quot;, and all parameters are passed into the Install scripts</p><h3 id="can-i-deploy-files-along-with-my-scripts" tabindex="-1">Can I deploy files along with my scripts? <a class="header-anchor" href="#can-i-deploy-files-along-with-my-scripts" aria-label="Permalink to &quot;Can I deploy files along with my scripts?&quot;">​</a></h3><p>Yes. Tasks have a “File” parameter type. Immy will download the file and provide the path to the file in variable. If a zip file is provided, the zip file will be extracted and the path to the extracted zip folder will have Folder appended to the provided parameter name and be available to the task script. Ex. Providing a file parameter name $ZipFile, there will be an additional parameter created call $ZipFileFolder. $ZipFile will contain the path to the original zip file and $ZipFileFolder will contain the file path to the extracted contents of the zip file.</p><h3 id="can-i-deploy-a-script-to-all-of-my-computers" tabindex="-1">Can I deploy a script to all of my computers? <a class="header-anchor" href="#can-i-deploy-a-script-to-all-of-my-computers" aria-label="Permalink to &quot;Can I deploy a script to all of my computers?&quot;">​</a></h3><p>Yes, you do this by creating a Task. We strongly recommend your task includes a ‘Test’ so Immy can check its work and provide reporting on the effectiveness of your script.</p><h3 id="why-do-i-have-to-create-a-configuration-task-to-get-custom-parameters-into-my-software" tabindex="-1">Why do I have to create a Configuration Task to get custom parameters into my Software? <a class="header-anchor" href="#why-do-i-have-to-create-a-configuration-task-to-get-custom-parameters-into-my-software" aria-label="Permalink to &quot;Why do I have to create a Configuration Task to get custom parameters into my Software?&quot;">​</a></h3><ul><li>Some software can only be configured at install time by providing command line parameters to the installer, think Antivirus products.</li><li>Some software can only be configured after they are installed, think VPN Profiles</li><li>Some software can go either way (Generally by manipulating config files or registry values)</li></ul><p>Let’s say your Software package accepts command line parameters at install time. You would create a Configuration Task with those parameters without implementing the scripts on that Task. ImmyBot will pass the parameters into the install script.</p><p>Later you need to reconfigure this software on lots of machines. You discover that the parameters you passed into the installer are ultimately held as registry values (Duo Logon Provider is like this). At this time you would implement the scripts on the Software’s Configuration Task. These scripts task will test the existing registry values against the desired ones, and set them to the desired value, and then re-test to verify.</p><h3 id="how-does-immy-get-the-latest-version-of-software" tabindex="-1">How does Immy get the latest version of software? <a class="header-anchor" href="#how-does-immy-get-the-latest-version-of-software" aria-label="Permalink to &quot;How does Immy get the latest version of software?&quot;">​</a></h3><p>This is done via “Dynamic Versions”. Rather than upload the latest installer for every version of a piece of software, create a dynamic versions script that returns the most current version number, and the URL to download it. Reader, Zoom, 7zip, Chrome, Edge, Firefox, Bluebeam, Citrix, Egnyte, and many more already have dynamic version scripts defined. This allows Immy to keep these items up to date on all your machines.</p><h3 id="how-do-you-pass-variables-to-invoke-immycommand" tabindex="-1">How do you pass variables to Invoke-ImmyCommand? <a class="header-anchor" href="#how-do-you-pass-variables-to-invoke-immycommand" aria-label="Permalink to &quot;How do you pass variables to Invoke-ImmyCommand?&quot;">​</a></h3><p>To pass variables from your meta script to Invoke-ImmyCommand, reference the variable like this:</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:VariableName</span></span></code></pre></div><p>Example:</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Set your variables</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$VariableOne </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello World&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$VariableTwo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello World 2&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Do things outside of Invoke-ImmyCommand</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Write-host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Outside of Invoke-ImmyCommand&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Invoke-ImmyCommand to do things on the PC</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Invoke-ImmyCommand</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">600</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scriptblock {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Write-Host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\`Inside Invoke-ImmyCommand&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ForegroundColor Green</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Write-host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">env:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">COMPUTERNAME </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ForegroundColor Green</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Write-Host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Writing </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\`$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VariableOne: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:VariableOne</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ForegroundColor Green</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Write-Host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Writing </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\`$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VariableTwo: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:VariableTwo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ForegroundColor Green</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #You cannot set variables that are outside of Invoke-ImmyCommand</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Write-Host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Attempting to set variables&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ForegroundColor Yellow</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  $VariableOne </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;GoodBye World&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  $VariableThree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Goodbye World 2&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Write-host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Writing variables to host&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ForegroundColor Yellow</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Write-Host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Writing </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\`$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VariableOne again: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:VariableOne</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ForegroundColor Green</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Write-host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Writing </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\`$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VariableThree: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$VariableThree</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ForegroundColor Green</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Write-Host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\`Outside of Invoke-ImmyCommand again&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Write-Host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Writing </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\`$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VariableOne again: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$VariableOne</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Write-Host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Writing </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\`$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VariableThree: again: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$VariableThree</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Write-Host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;End of Script&quot;</span></span></code></pre></div><p>Output: <img src="`+k+'" alt="alt text"></p>',205))])}const A=n(c,[["render",u]]);export{f as __pageData,A as default};
